
# Setting Application Port
server.port=8081
# to kill the port: cmd->netstat -a -o -n,
# find pid by searching port# with ctrl+f,
#                        taskkill /f /pid

#static resources for thymeleaf
spring.mvc.static-path-pattern=/webapp/**

#Live Reload
spring.devtools.livereload.enabled=true

#Disable Thymeleaf cache: Set the default value of the cache to false during the development process to
# prevent the caching function from properly reflecting modified sources.
spring.thymeleaf.cache = false
###################################### DB ######################################
# MariaDB
#spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
#spring.datasource.url=jdbc:mariadb://localhost:3306/shop
#spring.datasource.username=root
#spring.datasource.password=1234

#MySQL
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/shop
#spring.datasource.username=root
#spring.datasource.password=1234

#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# SQL includes standard SQL and SQL provided by DBMS vendors. You can think of the SQL created by
# each vendor as a dialect. Since the DB we use is MySQL, we tell JPA to use MySQL8Dialect.
# Even if you replace the DB with Oracle, you can run the application without problems
# if you set up Oracle's dialect.


# H2
# Datasource setting
spring.datasource.driver-class-name=org.h2.Driver
# Static URL setting
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
# H2 DB Dialect setting
sping.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Activate the console window to view the built-in h2 database as a GUI.
# Since it is disabled by default, you must set it to true to view the console window.
spring.h2.console.enabled=true



# Forces the encoding of HTTP requests and responses to the charset I specify.
server.servlet.encoding.force=true

# DB URL setting
# Disable generating unique URL (Unique ID/URL displayed on the console every time the server restarts)
spring.datasource.generate-unique-name=false

# Executed query console output
spring.jpa.properties.hibernate.show_sql=true

# Option for the script file(data.sql) to operate after hibernate initialization
spring.jpa.defer-datasource-initialization=true

# Format the query displayed in the console window for readability
# Query line breaks for intuitive visualization
spring.jpa.properties.hibernate.format_sql=true

# Set database initialization strategy
spring.jpa.hibernate.ddl-auto=update
# This option allows you to set JPA's database initialization strategy when running the application.
# There are five options in total:

# none: Not used
# create: Create table after deleting existing table
# create-drop: Create table after dropping existing table. Delete table at exit point
# update: Apply changed schema
# validate: Verify normal mapping between entities and tables

# Since deleting a column in the update option can cause huge problems, only column addition is reflected.
# In the early stages of development, it is best to focus on becoming familiar with using the create or
# update option and set the validate option later. You should never use create, create-drop, or
# update in a staging or operating environment. In staging and operation servers, table creation and
# column addition, deletion, and modification are done directly in the database, and
# only normal mapping relationships are confirmed by using none or validate.
# The staging environment is an environment that is almost identical to the operating environment and
# verifies various functions (performance, errors, etc.) before deploying to the operating environment.
# The operating environment is the environment in which the actual service is operated.



# Print bind parameters as question marks in the query.
# Add code to check parameter values passed from JPA query to DB.
# Often, you can see "?" in SQL queries output to the log.
# If you add this code, you can see the value contained in "?".
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


################################# Logging Level #################################

# Declare information provision
logging.level.org.springframework=info
# Check from the bottom of the jar folder (com.heeju)
logging.level.org.com.heeju=debug
# Information level in detail(trace level)
logging.level.org.springframework.security=trace


###################################### I/O ######################################

#Maximum size per file
spring.servlet.multipart.maxFileSize=20MB
#Maximum file size per request
spring.servlet.multipart.maxRequestSize=100MB
#Image storage path
itemImgLocation=D:/IT_SPACES/AutoProject/SpringBoot/Sources/shop/item
#Resource upload path:
uploadPath=file:///D:/IT_SPACES/AutoProject/SpringBoot/Sources/shop/


